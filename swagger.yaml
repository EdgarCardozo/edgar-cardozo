swagger: "2.0"
info:
  description: "Here you will the description of the use of this REST API."
  version: "1.0.0"
  title: "SHOPPING CART API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "shopping.swagger.io"
basePath: "/v2"
tags:
- name: "purchase"
  description: "Operations for purchase"
- name: "carts"
  description: "Everything about shopping carts"
- name: "items"
  description: "Everithing about the Items for sell in the Shopping"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /buy:
    post:
      tags:
      - "purchase"
      summary: "Concrete a new transaction and clears the cart"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Purchase object that is required to complete the transaction"
        required: true
        schema:
          $ref: "#/definitions/Purchase"
      responses:
        405:
          description: "Invalid input"
  /build:
    put:
      tags:
      - "purchase"
      summary: "Build a cart by adding items to it"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Purchase object that is required to complete the transaction"
        required: true
        schema:
          $ref: "#/definitions/Purchase"
      responses:
        405:
          description: "Invalid input"
  /carts:
    post:
      tags:
      - "carts"
      summary: "Add a new cart to the store"
      description: ""
      operationId: "addCart"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cart object that needs to be added to the shopping"
        required: true
        schema:
          $ref: "#/definitions/Cart"
      responses:
        405:
          description: "Invalid input"
    get:
      tags:
      - "carts"
      summary: "Get all carts saved in the store"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: Carts response
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Cart'
      
  /cart/{idCart}:
    put:
      tags:
      - "carts"
      summary: "Update an existing cart"
      description: ""
      operationId: "updateCart"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: "idCart"
        description: "Id of the cart that need to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Cart object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Cart"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Cart not found"
        405:
          description: "Validation exception"
    get:
      tags:
      - "carts"
      summary: "Get all carts saved in the store"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idCart"
        in: "path"
        description: "Id of the cart that is called"
        required: true
        type: "integer"
      responses:
        "200":
          description: Carts response
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Cart'
  /items:
    post:
      tags:
      - "items"
      summary: "Saves an item in the store"
      operationId: "updateItemWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idItem"
        in: "path"
        description: "ID of item that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "item"
        in: body
        description: "Updated status of the item"
        required: false
        schema:
          $ref: "#/definitions/Item"
      responses:
        405:
          description: "Invalid input"
    get:
      tags:
      - "items"
      summary: "Gets all items saved in the store"
      responses:
        "200":
          description: Items response
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Item'
  
  /items/{idItem}:
    get:
      tags:
      - "items"
      summary: "Find item by ID"
      description: "Returns a single item"
      operationId: "getItemById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idItem"
        in: "path"
        description: "ID of item to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Item"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Item not found"
    put:
      tags:
      - "items"
      summary: "Saves an item in the store"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "idItem"
        in: "path"
        description: "ID of item that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "item"
        in: body
        description: "Updated status of the item"
        required: false
        schema:
          $ref: "#/definitions/Item"
      responses:
        405:
          description: "Invalid input"
    delete:
      tags:
      - "items"
      summary: "Deletes an item"
      description: ""
      operationId: "deleteItem"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "idItem"
        in: "path"
        description: "Item id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Item not found"
  
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Purchase:
    type: "object"
    properties:
      user:
        $ref: "#/definitions/User"
      items:
        type: "array"
        items: 
          $ref: "#/definitions/Item"
        
  Item:
    type: "object"
    properties:
      idItem:
        type: "integer"
        example: "1234"
      category:
        type: "string"
        example: "Sanitation"
      price:
        type: "number"
        example: "32.75"
      name:
        type: "string"
        example: "Shampoo"
      cost:
        type: "number"
        example: "24.75"
      stock:
        type: "integer"
        example: "125"
  User:
    type: "object"
    properties:
      idUser:
        type: "integer"
        format: "int64"
        example: 40049181
      username:
        type: "string"
        example: "jonhlennon78"
      password:
        type: "string"
    xml:
      name: "User"
  Cart:
    type: "object"
    required:
    - "name"
    properties:
      idCart:
        type: "integer"
        format: "int64"
      totalPrice:
        type: "integer"
      payment:
        type: "string"
      discount:
        type: "boolean"
      items:
          type: "array"
          items: 
            $ref: "#/definitions/Item"
    xml:
      name: "Cart"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"